<?php

namespace Illuminate\Support\Facades;

/**
 * @method static capture()
 * @method static $this instance()
 * @method static string method()
 * @method static string root()
 * @method static string url() Get the URL (no query string)
 * @method static string fullUrl()
 * @method static string fullUrlWithQuery(array $query)
 * @method static string path()
 * @method static string decodedPath()
 * @method static string|null segment(int $index, string | null $default)
 * @method static array segments()
 * @method static bool is(mixed $patterns)
 * @method static bool routeIs(mixed $patterns)
 * @method static bool fullUrlIs(mixed $patterns)
 * @method static bool ajax()
 * @method static bool pjax()
 * @method static bool secure()
 * @method static string ip()
 * @method static array ips()
 * @method static string userAgent()
 * @method static void merge(array $input)
 * @method static void replace(array $input)
 * @method static mixed json(string $key, mixed $default)
 * @method static \Illuminate\Http\Request createFromBase(\Symfony\Component\HttpFoundation\Request $request)
 * @method static duplicate(array $query, array $request, array $attributes, array $cookies, array $files, array $server)
 * @method static \Illuminate\Session\Store session()
 * @method static void setLaravelSession(\Illuminate\Contracts\Session\Session $session)
 * @method static mixed user(string | null $guard)
 * @method static \Illuminate\Routing\Route|object|string route(string | null $param)
 * @method static string fingerprint()
 * @method static $this setJson(array $json)
 * @method static \Closure getUserResolver()
 * @method static $this setUserResolver(\Closure $callback)
 * @method static \Closure getRouteResolver()
 * @method static $this setRouteResolver(\Closure $callback)
 * @method static array toArray()
 * @method static bool offsetExists(string $offset)
 * @method static mixed offsetGet(string $offset)
 * @method static void offsetSet(string $offset, mixed $value)
 * @method static void offsetUnset(string $offset)
 * @method static void initialize(array $query, array $request, array $attributes, array $cookies, array $files, array $server, string | resource $content)
 * @method static createFromGlobals()
 * @method static create(string $uri, string $method, array $parameters, array $cookies, array $files, array $server, string $content)
 * @method static void setFactory()
 * @method static void overrideGlobals()
 * @method static void setTrustedProxies(array $proxies, int $trustedHeaderSet)
 * @method static array getTrustedProxies()
 * @method static int getTrustedHeaderSet()
 * @method static void setTrustedHosts(array $hostPatterns)
 * @method static array getTrustedHosts()
 * @method static void setTrustedHeaderName(string $key, string $value)
 * @method static string getTrustedHeaderName(string $key)
 * @method static string normalizeQueryString(string $qs)
 * @method static void enableHttpMethodParameterOverride()
 * @method static bool getHttpMethodParameterOverride()
 * @method static mixed get(string $key, mixed $default)
 * @method static \Symfony\Component\HttpFoundation\SessionInterface|null getSession()
 * @method static bool hasPreviousSession()
 * @method static bool hasSession()
 * @method static void setSession()
 * @method static array getClientIps()
 * @method static string|null getClientIp()
 * @method static string getScriptName()
 * @method static string getPathInfo()
 * @method static string getBasePath()
 * @method static string getBaseUrl()
 * @method static string getScheme()
 * @method static int|string getPort()
 * @method static string|null getUser()
 * @method static string|null getPassword()
 * @method static string getUserInfo()
 * @method static string getHttpHost()
 * @method static string getRequestUri()
 * @method static string getSchemeAndHttpHost()
 * @method static string getUri() Generates a normalized URI (URL)
 * @method static string getUriForPath(string $path)
 * @method static string getRelativeUriForPath(string $path)
 * @method static string|null getQueryString()
 * @method static bool isSecure()
 * @method static string getHost()
 * @method static void setMethod(string $method)
 * @method static string getMethod()
 * @method static string getRealMethod()
 * @method static string getMimeType(string $format)
 * @method static array getMimeTypes(string $format)
 * @method static string|null getFormat(string $mimeType)
 * @method static void setFormat(string $format, string | array $mimeTypes)
 * @method static string getRequestFormat(string $default)
 * @method static void setRequestFormat(string $format)
 * @method static string|null  getContentType()
 * @method static void setDefaultLocale(string $locale)
 * @method static string getDefaultLocale()
 * @method static void setLocale(string $locale)
 * @method static string getLocale()
 * @method static bool isMethod(string $method)
 * @method static bool isMethodSafe(bool $andCacheable)
 * @method static bool isMethodIdempotent()
 * @method static bool isMethodCacheable()
 * @method static string|resource getContent(bool $asResource)
 * @method static array getETags()
 * @method static bool isNoCache()
 * @method static string|null getPreferredLanguage(array $locales)
 * @method static array getLanguages()
 * @method static array getCharsets()
 * @method static array getEncodings()
 * @method static array getAcceptableContentTypes()
 * @method static bool isXmlHttpRequest()
 * @method static bool isFromTrustedProxy()
 * @method static bool matchesType(string $actual, string $type)
 * @method static bool isJson()
 * @method static bool expectsJson()
 * @method static bool wantsJson()
 * @method static bool accepts(string | array $contentTypes)
 * @method static string|null prefers(string | array $contentTypes)
 * @method static bool acceptsJson()
 * @method static bool acceptsHtml()
 * @method static string format(string $default)
 * @method static string|array old(string $key, string | array | null $default)
 * @method static void flash()
 * @method static void flashOnly(array | mixed $keys)
 * @method static void flashExcept(array | mixed $keys)
 * @method static void flush()
 * @method static string|array server(string $key, string | array | null $default)
 * @method static bool hasHeader(string $key)
 * @method static string|array header(string $key, string | array | null $default)
 * @method static string|null bearerToken()
 * @method static bool exists(string | array $key)
 * @method static bool has(string | array $key)
 * @method static bool hasAny(mixed $key)
 * @method static bool filled(string | array $key)
 * @method static array keys()
 * @method static array all(array | mixed $keys)
 * @method static string|array input(string $key, string | array | null $default)
 * @method static array only(array | mixed $keys)
 * @method static array except(array | mixed $keys)
 * @method static string|array query(string $key, string | array | null $default)
 * @method static string|array post(string $key, string | array | null $default)
 * @method static bool hasCookie(string $key)
 * @method static string|array cookie(string $key, string | array | null $default)
 * @method static array allFiles()
 * @method static bool hasFile(string $key)
 * @method static \Illuminate\Http\UploadedFile|array|null file(string $key, mixed $default)
 * @method static void macro(string $name, object | callable $macro)
 * @method static void mixin(object $mixin)
 * @method static bool hasMacro(string $name)
 * @method static void validate()
 *
 * @see \Illuminate\Http\Request
 */
class Request extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return 'request';
    }
}
