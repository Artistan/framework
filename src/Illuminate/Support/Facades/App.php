<?php

namespace Illuminate\Support\Facades;

/**
 * @method static string version()
 * @method static void bootstrapWith()
 * @method static void afterLoadingEnvironment()
 * @method static void beforeBootstrapping()
 * @method static void afterBootstrapping()
 * @method static bool hasBeenBootstrapped()
 * @method static $this setBasePath()
 * @method static string path()
 * @method static string basePath()
 * @method static string bootstrapPath()
 * @method static string configPath()
 * @method static string databasePath()
 * @method static $this useDatabasePath()
 * @method static string langPath()
 * @method static string publicPath()
 * @method static string storagePath()
 * @method static $this useStoragePath()
 * @method static string resourcePath()
 * @method static string environmentPath()
 * @method static $this useEnvironmentPath()
 * @method static $this loadEnvironmentFrom()
 * @method static string environmentFile()
 * @method static string environmentFilePath()
 * @method static string|bool environment()
 * @method static bool isLocal()
 * @method static string detectEnvironment()
 * @method static bool runningInConsole()
 * @method static bool runningUnitTests()
 * @method static void registerConfiguredProviders()
 * @method static \Illuminate\Support\ServiceProvider register($provider, $options = array())
 * @method static \Illuminate\Support\ServiceProvider|null getProvider()
 * @method static \Illuminate\Support\ServiceProvider resolveProvider()
 * @method static void loadDeferredProviders()
 * @method static void loadDeferredProvider()
 * @method static void registerDeferredProvider()
 * @method static mixed make($abstract, $parameters = array())
 * @method static bool bound()
 * @method static bool isBooted()
 * @method static void boot()
 * @method static void booting()
 * @method static void booted()
 * @method static bool shouldSkipMiddleware()
 * @method static string getCachedServicesPath()
 * @method static string getCachedPackagesPath()
 * @method static bool configurationIsCached()
 * @method static string getCachedConfigPath()
 * @method static bool routesAreCached()
 * @method static string getCachedRoutesPath()
 * @method static bool isDownForMaintenance()
 * @method static void abort(int $code, string $message, array $headers)
 * @method static $this terminating()
 * @method static void terminate()
 * @method static array getLoadedProviders()
 * @method static array getDeferredServices()
 * @method static void setDeferredServices()
 * @method static void addDeferredServices()
 * @method static bool isDeferredService()
 * @method static void provideFacades()
 * @method static $this configureMonologUsing()
 * @method static bool hasMonologConfigurator()
 * @method static callable getMonologConfigurator()
 * @method static string getLocale()
 * @method static void setLocale(string $locale)
 * @method static bool isLocale(string $locale)
 * @method static void registerCoreContainerAliases()
 * @method static void flush()
 * @method static string getNamespace()
 * @method static \Illuminate\Contracts\Container\ContextualBindingBuilder when(string $concrete)
 * @method static bool has(string $id)
 * @method static bool resolved(string $abstract)
 * @method static bool isShared(string $abstract)
 * @method static bool isAlias(string $name)
 * @method static void bind(string | array $abstract, \Closure | string | null $concrete, bool $shared)
 * @method static bool hasMethodBinding(string $method)
 * @method static void bindMethod(string $method, \Closure $callback)
 * @method static mixed callMethodBinding(string $method, mixed $instance)
 * @method static void addContextualBinding(string $concrete, string $abstract, \Closure | string $implementation)
 * @method static void bindIf(string $abstract, \Closure | string | null $concrete, bool $shared)
 * @method static void singleton(string | array $abstract, \Closure | string | null $concrete)
 * @method static void extend(string $abstract, \Closure $closure)
 * @method static mixed instance(string $abstract, mixed $instance)
 * @method static void tag(array | string $abstracts, array | mixed $tags)
 * @method static array tagged(string $tag)
 * @method static void alias(string $abstract, string $alias)
 * @method static mixed rebinding(string $abstract, \Closure $callback)
 * @method static mixed refresh(string $abstract, mixed $target, string $method)
 * @method static \Closure wrap(\Closure $callback, array $parameters)
 * @method static mixed call(callable | string $callback, array $parameters, string | null $defaultMethod)
 * @method static \Closure factory(string $abstract)
 * @method static mixed makeWith(string $abstract, array $parameters)
 * @method static mixed Entry. get(string $id,)
 * @method static mixed build(string $concrete)
 * @method static void resolving(string $abstract, \Closure | null $callback)
 * @method static void afterResolving(string $abstract, \Closure | null $callback)
 * @method static array getBindings()
 * @method static string getAlias(string $abstract)
 * @method static void forgetExtenders(string $abstract)
 * @method static void forgetInstance(string $abstract)
 * @method static void forgetInstances()
 * @method static getInstance()
 * @method static setInstance(\Illuminate\Contracts\Container\Container | null $container)
 * @method static bool offsetExists(string $key)
 * @method static mixed offsetGet(string $key)
 * @method static void offsetSet(string $key, mixed $value)
 * @method static void offsetUnset(string $key)
 * @see \Illuminate\Foundation\Application
 */
class App extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return 'app';
    }
}
